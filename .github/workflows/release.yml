name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: extract-version
        run: |
          # Get the current tag (this workflow should be run from a tag)
          CURRENT_TAG=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "")

          if [ -z "$CURRENT_TAG" ]; then
            echo "‚ùå No tag found at current commit. This workflow must be run from a tagged commit."
            echo "Please create and push a tag (e.g., v1.2.3) and run the workflow from that tag."
            exit 1
          fi

          echo "üîç Current tag: $CURRENT_TAG"

          # Extract version from tag (remove 'v' prefix if present)
          if [[ "$CURRENT_TAG" =~ ^v?([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "‚úÖ Detected version from tag: $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Invalid tag format: $CURRENT_TAG"
            echo "Tag must be in semantic format (v1.2.3 or 1.2.3)"
            exit 1
          fi

  # Run TypeScript tests using existing workflow
  ts-tests:
    uses: ./.github/workflows/ts-tests.yml
    with:
      ref: ${{ github.ref }}
    needs: release

  # Run pre-commit checks using existing workflow
  pre-commit-checks:
    uses: ./.github/workflows/enforce-pre-commit.yml
    with:
      ref: ${{ github.ref }}
    needs: release

  # Run e2e tests using existing workflow
  e2e-tests:
    uses: ./.github/workflows/playwright.yml
    with:
      ref: ${{ github.ref }}
    needs: release

  # Continue with build after all tests pass
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [release, ts-tests, pre-commit-checks, e2e-tests]
    env:
      VERSION: ${{ needs.release.outputs.version }}
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0



      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: 'streamlit_pdf/frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd streamlit_pdf/frontend
          npm ci

      - name: Build frontend
        run: |
          echo "üèóÔ∏è Building frontend"
          cd streamlit_pdf/frontend
          npm run build

      - name: Build Python package
        run: |
          echo "üèóÔ∏è Building Python package"
          python -m pip install --upgrade pip build
          python -m build

      - name: Verify build artifacts
        run: |
          echo "üîç Verifying build artifacts"
          ls -la dist/
          if [ ! -f "dist/streamlit_pdf-$VERSION-py3-none-any.whl" ]; then
            echo "‚ùå Expected wheel file not found"
            exit 1
          fi
          if [ ! -f "dist/streamlit_pdf-$VERSION.tar.gz" ]; then
            echo "‚ùå Expected source distribution not found"
            exit 1
          fi
          echo "‚úÖ Build artifacts verified"

      - name: Store package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/
          retention-days: 30

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true

      - name: Set PyPI URL for notifications
        run: |
          echo "PYPI_URL=https://pypi.org/project/streamlit-pdf/$VERSION/" >> $GITHUB_ENV


      - name: Configure git for release
        run: |
          git config --global user.email "core+streamlitbot-github@streamlit.io"
          git config --global user.name "Streamlit Bot"

      - name: Create GitHub release
        run: |
          echo "üìã Creating GitHub release"

          # Create release with artifacts
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "Release v$VERSION" \
            --verify-tag \
            dist/*

          echo "‚úÖ GitHub release created"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Slack notification (success)
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          echo "üì¢ Sending success notification to Slack"
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"üéâ streamlit-pdf-viewer v$VERSION has been released!\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"üéâ *streamlit-pdf-viewer v$VERSION* has been released!\"
                  }
                },
                {
                  \"type\": \"section\",
                  \"fields\": [
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Version:*\nv$VERSION\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*GitHub Release:*\n<https://github.com/${{ github.repository }}/releases/tag/v$VERSION|View Release>\"
                    }
                  ]
                },
                {
                  \"type\": \"section\",
                  \"fields\": [
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*PyPI:*\n<$PYPI_URL|View on PyPI>\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Workflow:*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>\"
                    }
                  ]
                }
              ]
            }" \
            $SLACK_WEBHOOK



      - name: Send Slack notification (failure)
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          echo "üì¢ Sending failure notification to Slack"
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"‚ùå Release v$VERSION failed!\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"‚ùå *streamlit-pdf-viewer v$VERSION* release failed!\"
                  }
                },
                {
                  \"type\": \"section\",
                  \"fields\": [
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Version:*\nv$VERSION\"
                    },
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Workflow:*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Failed Run>\"
                    }
                  ]
                }
              ]
            }" \
            $SLACK_WEBHOOK

      - name: Release summary
        if: success()
        run: |
          echo "üéâ Release v$VERSION completed successfully!"
          echo ""
          echo "üì¶ Artifacts:"
          echo "  - PyPI: https://pypi.org/project/streamlit-pdf/$VERSION/"
          echo "  - GitHub: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          echo ""
          echo "üîó Links:"
          echo "  - Git tag: v$VERSION"